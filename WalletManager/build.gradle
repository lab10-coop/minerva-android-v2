plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}
apply from: "$rootProject.projectDir/dependencies.gradle"

android {
    compileSdk _compileSdk
    buildToolsVersion _buildToolsVersion

    defaultConfig {
        minSdkVersion _minSdkVersion
        targetSdk _targetSdk
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
        buildConfigField "String", "ENS_TEST_URL", '"https://ropsten.infura.io/v3/"'
        buildConfigField "String", "ENS_MAIN_URL", '"https://mainnet.infura.io/v3/"'
        buildConfigField "String", "ERC20_TOKEN_DATA_URL", '"https://raw.githubusercontent.com/lab10-coop/minerva-tokenlists/master/all.json"'
        buildConfigField "String", "ERC20_TOKEN_DATA_LAST_COMMIT", '"https://api.github.com/repos/lab10-coop/minerva-tokenlists/commits?path=all.json&page=1&per_page=1"'
        buildConfigField "String", "ETHEREUM_MAINNET_TOKEN_BALANCE_URL", '"https://api.etherscan.io/"'
        buildConfigField "String", "ETHEREUM_RINKEBY_TOKEN_BALANCE_URL", '"https://api-rinkeby.etherscan.io/"'
        buildConfigField "String", "ETHEREUM_ROPSTEN_TOKEN_BALANCE_URL", '"https://api-ropsten.etherscan.io/"'
        buildConfigField "String", "ETHEREUM_KOVAN_TOKEN_BALANCE_URL", '"https://api-kovan.etherscan.io/"'
        buildConfigField "String", "ETHEREUM_GOERLI_TOKEN_BALANCE_URL", '"https://api-goerli.etherscan.io/"'
        buildConfigField "String", "ETHEREUM_SEPOLIA_TOKEN_BALANCE_URL", '"https://api-sepolia.etherscan.io/"'
        buildConfigField "String", "ARTIS_TAU_TOKEN_BALANCE_URL", '"https://explorer.tau1.artis.network/"'
        buildConfigField "String", "ARTIS_SIGMA_TOKEN_BALANCE_URL", '"https://explorer.sigma1.artis.network/"'
        buildConfigField "String", "POA_SOKOL_TOKEN_BALANCE_URL", '"https://blockscout.com/poa/sokol/"'
        buildConfigField "String", "POA_CORE_TOKEN_BALANCE_URL", '"https://blockscout.com/poa/core/"'
        buildConfigField "String", "GNO_TOKEN_BALANCE_URL", '"https://blockscout.com/poa/xdai/"'
        buildConfigField "String", "GNO_CHAI_TOKEN_BALANCE_URL", '"https://blockscout.chiadochain.net"'
        buildConfigField "String", "LUKSO_TOKEN_BALANCE_URL", '"https://blockscout.com/lukso/l14/"'
        buildConfigField "String", "POLYGON_TOKEN_BALANCE_URL", '"https://api.polygonscan.com/"'
        buildConfigField "String", "BINANCE_SMART_CHAIN_MAINNET_TOKEN_BALANCE_URL", '"https://api.bscscan.com/"'
        buildConfigField "String", "BINANCE_SMART_CHAIN_TESTNET_TOKEN_BALANCE_URL", '"https://api-testnet.bscscan.com/"'
        buildConfigField "String", "POLYGONSCAN_KEY", System.env.POLYGONSCAN_KEY ?: localProperty("polygonscan.key")
        buildConfigField "String", "ETHERSCAN_KEY", System.env.ETHERSCAN_KEY ?: localProperty("etherscan.key")
        buildConfigField "String", "INFURA_API_KEY", System.env.INFURA_API_KEY ?: localProperty("infura.key")
        buildConfigField "String", "BSCSCAN_KEY", System.env.BSCSCAN_KEY ?: localProperty("bscscan.key")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'enviroment'
    productFlavors {
        flavorDimensions 'enviroment'
        staging {
            dimension 'enviroment'
            matchingFallbacks = ["staging"]
        }

        production {
            dimension 'enviroment'
            matchingFallbacks = ["production"]
        }
    }
    namespace 'minerva.android.walletmanager'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation platform('com.google.firebase:firebase-bom:25.12.0')
    implementation project(':CryptographyProvider')
    implementation project(':KotlinUtils')
    implementation project(':WalletConfigProvider')
    implementation project(':ApiProvider')
    implementation project(':BlockchainProvider')
    implementation project(':WalletConnect')

    implementation('com.google.firebase:firebase-crashlytics') {
        transitive = true
    }
    implementation androidCoreDependencies.values()
    implementation koinDependencies.values()
    implementation coreDependencies.values()
    implementation rxDependencies.values()
    implementation startupDependencies.values()
    implementation jsonLogicDependencies.values()
    implementation kotlinReflect.values()
    testImplementation testDependencies.values()
    implementation room.values()
    implementation okhttp.values()
    kapt "org.xerial:sqlite-jdbc:3.36.0"
    kapt "androidx.room:room-compiler:2.2.6"
}

Object localProperty(String propertyName) {
    def localProperties = new Properties()
    def localPropertiesFile = rootProject.file('local.properties')
    if (localPropertiesFile.exists()) {
        localPropertiesFile.withReader('UTF-8') { reader ->
            localProperties.load(reader)
        }
    }
    def propertyValue = localProperties[propertyName]
    return propertyValue != null ? propertyValue : ''
}
